!/bin/sh 
#
# postinst:
#
# WebTools - Initial download and firewall configuration settings installation for Synology
#
#
# by ChuckPa, a Plex Community member
#
# Ver 1.0 - Initial release
# Ver 1.1 - Processor independence update ('noarch')
# Ver 1.2 - DSM 5.2 & 6.0 (U3) single version compatibility (Syno installer changes) + Upgrade-in-place
#           Split Log (install) and Upgrade history log


# Put error messages in appropriate system log / communicate back to user
WriteSyno() {

  if [ "$SYNOPKG_TEMP_LOGFILE" == "" ]; then
    return 0
  fi

  touch  "$SYNOPKG_TEMP_LOGFILE"
  echo `date +"%Y-%m-%e %H.%M.%S %Z"`: $* >> "$SYNOPKG_TEMP_LOGFILE"
} 

# Writes permanent history (log) to WebTools.bundle/WebTools.log
WriteLog() {
  
  # Also inform user via Syno package mechanism if it is active, else it's our logfile
  touch   "$LOGFILE"
  echo `date +"%Y-%m-%e %H.%M.%S %Z"`: $* >> "$LOGFILE"
    
}
    
#================================================================
GetHostType() {
 
  # define the main flags
 
  # Location of the needed executables if not in standard locations
  CURL=/usr/bin/curl
  TAR=/bin/tar
  UNZIP=/usr/syno/bin/unzip
  
  # where the package is located
  PKGDIR=/var/packages/WebTools

 return 0
   
}
   
GetDestination() {
   
  # On Synology,  the Pre-install script determines if Plex is present and ok to use ($PMS_DIR)
   
  PMS_DIR="`synoshare --get Plex | grep Path | awk -F\[ '{ print $2 }' \
  | awk -F\] '{ print $1 }'`"
  
  # Now build the Plug-in directory
  PLUGIN_DIR="$PMS_DIR/Library/Application Support/Plex Media Server/Plug-ins"
  
  # Our default Logfile
  LOGFILE="$PLUGIN_DIR/WebTools.log"
  
  # Which release.   Release info for WebTools on Github
  RELEASE_LINK="https://api.github.com/repos/dagalufh/WebTools.bundle/releases/latest" 
  
  }
  
######################################################################
# Get latest release download link, and download that
######################################################################
downloadWT(){
  
  # Let's start by finding the browser_download_url
  # we will use the tarball directly for now.  (keep both here)
      
  # That again means, that QNAP'ers using this is not counted :-(
  #  DownloadURL=$(/sbin/curl -Lsk $RELEASE_LINK |grep 'browser_download_url')
  #   DownloadURL=$(/sbin/curl -Lsk $RELEASE_LINK |grep 'tarball_url')
  DownloadURL="`$CURL -Lsk $RELEASE_LINK |grep 'tarball_url'`"
      
  # Strip start part of line
  DownloadURL="`echo $DownloadURL | sed -e 's/"tarball_url": "//'`"
    
      
  # Strip end part of the response
  DownloadURL="`echo $DownloadURL | sed -e 's/..$//'`"
    
    
  WriteLog "Updating from $DownloadURL" 
    
    
  # Download the darn thingy
  $CURL -Lsk $DownloadURL -o "$PLUGIN_DIR/wt.tar.gz"
  if [ $? -ne 0 ]; then
    WriteLog Error $? while downloading WebTools
    WriteSyno ERROR $? while downloading WebTools
    return $? 
  fi
        
  return 0
}
      
######################################################################
# Create WT dir if missing, and then extract. remove tarball afterwards
######################################################################
extractWT(){
      
  if [ $ISUPGRADE ]; then
        
    WriteLog  "Forcing upgrade with installer upgrade"
        
  else
      
echo about to create WebTools.bundle dir
  # Create WebTools.bundle directory
    mkdir -p "$PLUGIN_DIR/WebTools.bundle"
    #WriteLog extractWT: mkdir $PLUGIN_DIR/WebTools.bundle
      
    if [ $? -ne 0 ]; then
      MSG="ERROR: Could not create WebTools.bundle directory in \' $PLUGIN_DIR '\  \(err $? \) "
      WriteLog $MSG
      WriteSyno $MSG
      return 1
    fi
  fi
        
  # Extract WebTools
  $TAR -xf "$PLUGIN_DIR/wt.tar.gz" --overwrite --strip 1 -C "$PLUGIN_DIR/WebTools.bundle"
  if [ $? -ne 0 ]; then
      # unable to extract
      MSG="ERROR:  Cannot extract wt.tar.gz to $PLUGIN_DIR/WebTools.bundle \(err $?\)"
      WriteSyno "$MSG"
      WriteLog  "$MSG"
      return 1
  fi
        
  rm -f "$PLUGIN_DIR/wt.tar.gz"
  #    $UNZIP -oq "$PLUGIN_DIR/wt.zip" -d "$PLUGIN_DIR/WebTools.bundle"
      
      
  # On Synology,  set ownership to plex, not root.
  chown -R plex:users "$PLUGIN_DIR/WebTools.bundle"
  find "$PLUGIN_DIR/WebTools.bundle" -type f -exec chmod 644 {} \;
  find "$PLUGIN_DIR/WebTools.bundle" -type d -exec chmod 755 {} \;
      
  # Success
  return 0
      
}
      
#######################################################################
      
# Get the host type and Destination directories then download and install WebTools into Plex
      
GetHostType
GetDestination
      

# Initialize
IsUpgrade=0
Retries=0
Downloaded=0
PlexRunning=0

# Determine if Install or Upgrade
if [ -f "/usr/local/webtools_upgrade" ]; then
  IsUpgrade=1
  WriteLog "Previous version detected.  Upgrade/Overwrite forced."
fi

# Determine if Plex is running or not
if [ -f "$PMS_DIR/Library/Application Support/Plex Media Server/plexmediaserver.pid" ]; then
  PlexRunning=1
fi        

# If Plex running and this is an upgrade,  stop Plex
if [ $IsUpgrade -eq 1 -a $Plexrunning -eq 1 ]; then
  /usr/syno/bin/synopkg stop "Plex Media Server"
fi;
        
until [ $Retries -gt 5 -o $Downloaded -eq 1 ]; do
        
  # Try the download 
  downloadWT
  
  # Check the return
  if [ $? -ne 0 ]; then
    retries=`expr $retries + 1`
    WriteLog "ERROR: Cannot download WT from GitHub, sleeping 10 sec. Retry \# $retries"
    sleep 10
        
  else
    Downloaded=1
    break
      
  fi
        
done
        
# Write results in logfile, exit if unable to proceed
if [ $Downloaded -eq 1 ]; then
  
  # Downloaded is true (no error)  Log it
  WriteLog  "Download successful.  Proceeding with installation."
  WriteSyno "WebTools download successful.  Proceeding with installation."
  
else

  MSG="ERROR: Unable to download WebTools after $retries retries.  Installation failure."
  WriteSyno "$MSG"
  WriteLog  "$MSG"

  # If Plex was running, restart it
  if [$IsUpgrade -eq 1 -a $PlexRunning -eq 1 ]; then
    /usr/syno/bin/synopkg start "Plex Media Server"
  fi

  exit 1

fi
        
        
        
# If download was successful,  perform extraction
extractWT  
if [ $? -ne 0 ]; then
        
# unable to extract WT and complete installation... ERROR
  MSG="ERROR: Could not extract WebTools.  Package installation aborted."
  WriteSyno "$MSG"
  WriteLog "$MSG"

  # If Plex was running, restart it
  if [$IsUpgrade -eq 1 -a $PlexRunning -eq 1 ]; then
    /usr/syno/bin/synopkg start "Plex Media Server"
  fi

  exit 1
fi
      
      
# Mark as loaded
  touch "$PLUGIN_DIR/WebTools.bundle/.isloaded"
      
  # Make certain the files in /var/packages are owned by root 
  chown -R root:root   /var/packages/WebTools
      
      
  # If upgrade, force remove firewall descriptions before upgrading (should already be gone)
  if [ $ISUPGRADE ]; then
    WriteLog Removing previous firewall definitions
    /usr/syno/bin/servicetool --remove-configure-file --package WebTools.sc
  fi
      
  # Add description of firewall ports to DSM's firewall built-in application list
  /usr/syno/bin/servicetool --install-configure-file --package /var/packages/WebTools/target/WebTools.sc
      
  if [ $? -eq 0 ]; then
    WriteLog New firewall rules definition installed
  fi

  # If an upgrade,  restart Plex
  if [$IsUpgrade -eq 1 -a $PlexRunning -eq 1 ]; then
    /usr/syno/bin/synopkg start "Plex Media Server"
  fi
        
  WriteLog  WebTools installation complete.
  WriteLog  " "
        
exit 0
